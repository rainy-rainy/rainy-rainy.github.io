{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1471597115000},{"_id":"source/.DS_Store","hash":"b2749cc535014550826dcdd7a105a3dc7c1b8e68","modified":1471599298000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1471597115000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1471597115000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1471597115000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1471597115000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1471597115000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1471597115000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1471597115000},{"_id":"themes/next/_config.yml","hash":"4175e233b7a5a971b57b2a59982b72baac22fffb","modified":1471598347000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1471597115000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1471597115000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1471597115000},{"_id":"source/_posts/ES6-Promise对象初探.md","hash":"9d607c2ccd8d2c12faefd822c361269685cdee48","modified":1471702612000},{"_id":"source/_posts/js古怪用法.md","hash":"d1ed453a01c0bab2d0170e8f4b44c12f35a5bfae","modified":1471600011000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1471597115000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1471597115000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1471597086000},{"_id":"themes/next/.git/index","hash":"3def52640920b31f59470613bdaec246b5ae5623","modified":1471597115000},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1471597115000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1471597115000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1471597115000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1471597115000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1471597115000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1471597115000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1471597115000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1471597115000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1471597115000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1471597115000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1471597115000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1471597115000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1471597115000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1471597115000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1471597115000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1471597115000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1471597115000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1471597115000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1471597115000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1471597115000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1471597115000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1471597115000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1471597115000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1471597115000},{"_id":"themes/next/source/404.html","hash":"909a2b39bf012a9bb70865f9ba4569a08b165adb","modified":1471598783000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1471597115000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1471597115000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1471597115000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1471597086000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1471597086000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1471597086000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1471597086000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1471597086000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1471597086000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1471597086000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1471597086000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1471597086000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1471597086000},{"_id":"themes/next/.git/logs/HEAD","hash":"b16e1d7efd7375593c5362d72481fdace1c38bd4","modified":1471597115000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1471597115000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1471597115000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1471597115000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1471597115000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1471597115000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1471597115000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1471597115000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471597115000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1471597115000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1471597115000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1471597115000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1471597115000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1471597115000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1471597115000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1471597115000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1471597115000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1471597115000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1471597115000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1471597115000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1471597115000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471597115000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471597115000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471597115000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471597115000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471597115000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471597115000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471597115000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471597115000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471597115000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471597115000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471597115000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471597115000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471597115000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471597115000},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1471597115000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1471597115000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1471597115000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1471597115000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1471597115000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1471597115000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1471597115000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1471597115000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1471597115000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1471597115000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1471597115000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1471597115000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1471597115000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1471597115000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1471597115000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1471597115000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471597115000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471597115000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471597115000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471597115000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471597115000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471597115000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471597115000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471597115000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471597115000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"b16e1d7efd7375593c5362d72481fdace1c38bd4","modified":1471597115000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1471597115000},{"_id":"themes/next/.git/objects/pack/pack-2457af7ca070402d50ed717fa5971eec33bc2328.idx","hash":"155c5919632b08e2c4687eaaf7c23856d976653e","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1471597115000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1471597115000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1471597115000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1471597115000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1471597115000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1471597115000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1471597115000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471597115000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471597115000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471597115000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471597115000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471597115000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471597115000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"b16e1d7efd7375593c5362d72481fdace1c38bd4","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1471597115000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1471597115000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471597115000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471597115000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471597115000},{"_id":"themes/next/.git/objects/pack/pack-2457af7ca070402d50ed717fa5971eec33bc2328.pack","hash":"26b91bb77cf38cc2c5fbf4a124ca0eaa951dffcb","modified":1471597115000},{"_id":"public/2016/08/16/ES6-Promise对象初探/index.html","hash":"d982e189463a015a310ac077110a4f1d42951189","modified":1471702627344},{"_id":"public/archives/index.html","hash":"f1ad58a45ad40e9c4c07a1f8e3ea3bdbf99840cb","modified":1471702627344},{"_id":"public/archives/2016/index.html","hash":"fc04b024e9dc781da32fcba6559b15156227b033","modified":1471702627344},{"_id":"public/archives/2016/07/index.html","hash":"9b0554d63743b631d2f04e440a627946566516b3","modified":1471702627345},{"_id":"public/archives/2016/08/index.html","hash":"852dee74faea6b92d52e406240764c290e3f246a","modified":1471702627345},{"_id":"public/tags/javascript/index.html","hash":"0cfcc54c0ee8c7d60e815dbf7a1d26e95e20880f","modified":1471702627345},{"_id":"public/2016/07/19/js古怪用法/index.html","hash":"d06433602aa13fb6624244b9e1e58fe0de20cbcd","modified":1471702627345},{"_id":"public/index.html","hash":"cccf050e14371871bb38c202485ca56d892bc058","modified":1471702627345},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471702627350},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471702627351},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471702627351},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471702627351},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471702627351},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471702627351},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471702627351},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471702627351},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471702627351},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471702627351},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471702627351},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471702627351},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471702627351},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471702627351},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471702627351},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471702627351},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471702627351},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471702627351},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471702627351},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471702627351},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471702627351},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471702627351},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471702627351},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471702627351},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471702628222},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471702628233},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471702628233},{"_id":"public/404.html","hash":"909a2b39bf012a9bb70865f9ba4569a08b165adb","modified":1471702628239},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1471702628239},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1471702628239},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1471702628240},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1471702628240},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1471702628240},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1471702628240},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471702628240},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471702628240},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1471702628240},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471702628240},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471702628240},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471702628240},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471702628240},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471702628241},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471702628241},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471702628241},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471702628241},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471702628241},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471702628241},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471702628241},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471702628241},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471702628241},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471702628241},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471702628241},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471702628241},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471702628241},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471702628241},{"_id":"public/css/main.css","hash":"65ae637f858ee2f944c7cd8db4d3fb567524ac2c","modified":1471702628241},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471702628241},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471702628241},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471702628241},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471702628241},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471702628241},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471702628242},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471702628242},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471702628242},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1471702628242},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471702628242},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471702628253}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ES6-Promise对象初探","date":"2016-08-16T14:12:53.000Z","_content":"\nES6标准中的Promise是异步编程的一种解决方案，除此之外还有回调函数，事件监听及发布/订阅。Promise对象保存未来事件（通常是一个异步操作）的结果，提供了API对各种异步操作做同样的处理。\n\nPromise对象有以下几个状态：\n\n1. Pending：进行中\n2. Resolved：又称Fulfilled，已完成\n3. Rejected：已失败\n\nPromise对象有以下特点：\n\n1. 对象的状态不受外界影响。只有异步操作的结果决定了当前的状态，其他任何操作都无法改变。这也是Promise名字的由来，意即“承诺”。\n2. 一旦状态改变，就不会再变，且任何时候都可以得到这个结果。具体来说，Promise对象的状态改变只有两种情况：从Pending到Resolved，或者从Pending到Rejected，只要这两种情况之一发生了，状态就会一直保持。且如果一个任务完成（状态改变），再添加回调函数，该回调函数会立即执行。这与事件不同，如果在触发事件之后监听将没有效果。\n\n有了Promise对象，就可以将异步操作以同步的流程表达出来，避免了层层嵌套的回调函数。且统一API使得对异步操作的控制更加方便。\n\n下面是一种简单的使用方式：\n\n        var promise = new Promise(function(resolve, reject) {\n          setTimeout(function(){\n            resolve('val')\n          });\n        });\n        \n        promise.then(onFulfilled,onRejected).catch(onRejected)\n\nPromise.prototype.then(onFulfilled，onRejected)为Promise实例添加状态改变时的回调函数，第二个参数是可选的。\n\n\nPromise.prototype.catch(onRejected)指定异步操作发生错误时的回调函数，此外，then方法指定的回调函数运行时抛出的错误也会触发该回调函数。\n\n","source":"_posts/ES6-Promise对象初探.md","raw":"---\ntitle: ES6-Promise对象初探\ndate: 2016-08-16 22:12:53\ntags:\n---\n\nES6标准中的Promise是异步编程的一种解决方案，除此之外还有回调函数，事件监听及发布/订阅。Promise对象保存未来事件（通常是一个异步操作）的结果，提供了API对各种异步操作做同样的处理。\n\nPromise对象有以下几个状态：\n\n1. Pending：进行中\n2. Resolved：又称Fulfilled，已完成\n3. Rejected：已失败\n\nPromise对象有以下特点：\n\n1. 对象的状态不受外界影响。只有异步操作的结果决定了当前的状态，其他任何操作都无法改变。这也是Promise名字的由来，意即“承诺”。\n2. 一旦状态改变，就不会再变，且任何时候都可以得到这个结果。具体来说，Promise对象的状态改变只有两种情况：从Pending到Resolved，或者从Pending到Rejected，只要这两种情况之一发生了，状态就会一直保持。且如果一个任务完成（状态改变），再添加回调函数，该回调函数会立即执行。这与事件不同，如果在触发事件之后监听将没有效果。\n\n有了Promise对象，就可以将异步操作以同步的流程表达出来，避免了层层嵌套的回调函数。且统一API使得对异步操作的控制更加方便。\n\n下面是一种简单的使用方式：\n\n        var promise = new Promise(function(resolve, reject) {\n          setTimeout(function(){\n            resolve('val')\n          });\n        });\n        \n        promise.then(onFulfilled,onRejected).catch(onRejected)\n\nPromise.prototype.then(onFulfilled，onRejected)为Promise实例添加状态改变时的回调函数，第二个参数是可选的。\n\n\nPromise.prototype.catch(onRejected)指定异步操作发生错误时的回调函数，此外，then方法指定的回调函数运行时抛出的错误也会触发该回调函数。\n\n","slug":"ES6-Promise对象初探","published":1,"updated":"2016-08-20T14:16:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis39qu9y0000vizg7webnhia","content":"<p>ES6标准中的Promise是异步编程的一种解决方案，除此之外还有回调函数，事件监听及发布/订阅。Promise对象保存未来事件（通常是一个异步操作）的结果，提供了API对各种异步操作做同样的处理。</p>\n<p>Promise对象有以下几个状态：</p>\n<ol>\n<li>Pending：进行中</li>\n<li>Resolved：又称Fulfilled，已完成</li>\n<li>Rejected：已失败</li>\n</ol>\n<p>Promise对象有以下特点：</p>\n<ol>\n<li>对象的状态不受外界影响。只有异步操作的结果决定了当前的状态，其他任何操作都无法改变。这也是Promise名字的由来，意即“承诺”。</li>\n<li>一旦状态改变，就不会再变，且任何时候都可以得到这个结果。具体来说，Promise对象的状态改变只有两种情况：从Pending到Resolved，或者从Pending到Rejected，只要这两种情况之一发生了，状态就会一直保持。且如果一个任务完成（状态改变），再添加回调函数，该回调函数会立即执行。这与事件不同，如果在触发事件之后监听将没有效果。</li>\n</ol>\n<p>有了Promise对象，就可以将异步操作以同步的流程表达出来，避免了层层嵌套的回调函数。且统一API使得对异步操作的控制更加方便。</p>\n<p>下面是一种简单的使用方式：</p>\n<pre><code>var promise = new Promise(function(resolve, reject) {\n  setTimeout(function(){\n    resolve(&apos;val&apos;)\n  });\n});\n\npromise.then(onFulfilled,onRejected).catch(onRejected)\n</code></pre><p>Promise.prototype.then(onFulfilled，onRejected)为Promise实例添加状态改变时的回调函数，第二个参数是可选的。</p>\n<p>Promise.prototype.catch(onRejected)指定异步操作发生错误时的回调函数，此外，then方法指定的回调函数运行时抛出的错误也会触发该回调函数。</p>\n","excerpt":"","more":"<p>ES6标准中的Promise是异步编程的一种解决方案，除此之外还有回调函数，事件监听及发布/订阅。Promise对象保存未来事件（通常是一个异步操作）的结果，提供了API对各种异步操作做同样的处理。</p>\n<p>Promise对象有以下几个状态：</p>\n<ol>\n<li>Pending：进行中</li>\n<li>Resolved：又称Fulfilled，已完成</li>\n<li>Rejected：已失败</li>\n</ol>\n<p>Promise对象有以下特点：</p>\n<ol>\n<li>对象的状态不受外界影响。只有异步操作的结果决定了当前的状态，其他任何操作都无法改变。这也是Promise名字的由来，意即“承诺”。</li>\n<li>一旦状态改变，就不会再变，且任何时候都可以得到这个结果。具体来说，Promise对象的状态改变只有两种情况：从Pending到Resolved，或者从Pending到Rejected，只要这两种情况之一发生了，状态就会一直保持。且如果一个任务完成（状态改变），再添加回调函数，该回调函数会立即执行。这与事件不同，如果在触发事件之后监听将没有效果。</li>\n</ol>\n<p>有了Promise对象，就可以将异步操作以同步的流程表达出来，避免了层层嵌套的回调函数。且统一API使得对异步操作的控制更加方便。</p>\n<p>下面是一种简单的使用方式：</p>\n<pre><code>var promise = new Promise(function(resolve, reject) {\n  setTimeout(function(){\n    resolve(&apos;val&apos;)\n  });\n});\n\npromise.then(onFulfilled,onRejected).catch(onRejected)\n</code></pre><p>Promise.prototype.then(onFulfilled，onRejected)为Promise实例添加状态改变时的回调函数，第二个参数是可选的。</p>\n<p>Promise.prototype.catch(onRejected)指定异步操作发生错误时的回调函数，此外，then方法指定的回调函数运行时抛出的错误也会触发该回调函数。</p>\n"},{"title":"js古怪用法","date":"2016-07-19T12:34:39.000Z","_content":"\n学习js已有一段时间，再读[JavaScript 秘密花园](http://www.jb51.net/onlineread/JavaScript-Garden-CN/)。\n\n---\n\n### 对象\n##### 对象使用和属性\n删除属性：唯一方法是用delete操作符；设置属性为null或者undefined并不能真正的删除属性，而只是移除了属性和值的关联。\n##### 原型\njs不包含传统的类继承模型，而是使用prototype原型继承模型。\n  \t\t  \t\t\n  \t\tfunction Foo() {\n\t\t    this.value = 42;\n\t\t}\n\t\tFoo.prototype = {\n\t\t    method: function() {}\n\t\t};\n\t\t\n\t\tfunction Bar() {}\n\t\t\n\t\t// 设置Bar的prototype属性为Foo的实例对象\n\t\tBar.prototype = new Foo();\n\t\tBar.prototype.foo = 'Hello World';\n\t\t\n\t\t// 修正Bar.prototype.constructor为Bar本身\n\t\tBar.prototype.constructor = Bar;\n\t\t\n\t\tvar test = new Bar() // 创建Bar的一个新实例\n\t\t\n\t\t// 原型链\n\t\ttest [Bar的实例]\n\t\t    Bar.prototype [Foo的实例] \n\t\t        { foo: 'Hello World' }\n\t\t        Foo.prototype\n\t\t            {method: ...};\n\t\t            Object.prototype\n\t\t                {toString: ... /* etc. */};\n\t\t                \n上面的例子中，test 对象从 Bar.prototype 和 Foo.prototype 继承下来；因此， 它能访问 Foo 的原型方法 method。同时，它也能够访问那个定义在原型上的 Foo 实例属性 value。 需要注意的是 new Bar() 不会创造出一个新的 Foo 实例，而是 重复使用它原型上的那个实例；因此，所有的 Bar 实例都会共享相同的 value 属性。\n\n属性查找：在查找一个对象的属性时，JS会向上遍历原型链，直到找到为止。如果到达原型链的顶端也就是Object.prototype仍然没有找到指定的属性，就返回undefined。\n\n性能：要警惕原型链过长带来的性能问题：如果一个属性在原型链顶端，则对于查找时间会带来不利影响，特别的，当试图获取一个 不存在的属性时会遍历整个原型链。此外，当使用for...in来循环遍历对象的属性时，原型链上的所有属性都将被访问。\n\n##### hasOwnProperty函数\n用来判断一个属性是自定义属性而不是原型链上的属性。hasOwnProperty是js中*唯一*处理属性但是不查找原型链的函数。\n\n\t\t// 修改Object.prototype\n\t\tObject.prototype.bar = 1; \n\t\tvar foo = {goo: undefined};\n\t\t\n\t\tfoo.bar; // 1\n\t\t'bar' in foo; // true\n\t\t\n\t\tfoo.hasOwnProperty('bar'); // false\n\t\tfoo.hasOwnProperty('goo'); // true\n\t\t\n使用for...in loop遍历对象属性时推荐使用hasOwnProperty方法来避免原型对象扩展带来的干扰。\n\n##### for in循环\n同in操作符一样，for in循环同样在查找对象属性时遍历整个原型链。\n\n\t\t// 修改 Object.prototype\n\t\tObject.prototype.bar = 1;\n\t\t\n\t\tvar foo = {moo: 2};\n\t\tfor(var i in foo) {\n\t\t    console.log(i); // 输出两个属性：bar 和 moo\n\t\t}\n不可能改变for in自身的行为，但是可以用hasOwnProperty来过滤出那些不希望出现在循环体中的属性。\n\n\t\t// foo 变量是上例中的\n\t\tfor(var i in foo) {\n\t\t    if (foo.hasOwnProperty(i)) {\n\t\t        console.log(i);\n\t\t    }\n\t\t}\n\t\t\n这是唯一正确的写法。比如广泛使用的库Prototype就扩展了原生的js对象（不推荐该种破坏封装的做法）。因此，当使用这种类库时，如果不使用hasOwnProperty过滤的for in就难免会出现问题。\n\n因此推荐总是使用hasOwnProperty，不要对代码的运行环境做任何假设，不要假设原生对象是否被扩展了。\n\n### 函数\n##### 函数声明与表达式\n函数也是一个对象，因此可以作为参数传递或者作为返回值，一个常见的做法是把匿名函数作为回调函数传递到异步函数中。\n\n有两种定义函数的方式：函数声明和函数表达式。主要区别是函数声明创建的方法会在执行前被解析，因此它存在于当前上下文的任何一个地方，即使在函数定义体的上面调用也是完全正确的。\n\n\t\t//函数声明\n\t\tfoo(); // 正常运行，因为foo在代码运行前已经被创建\n\t\tfunction foo() {}\n上面这段代码没有问题，因为使用了函数声明。下面这段代码会出错：\n\n\t\t//函数赋值表达式\n\t\tfoo; // 'undefined'\n\t\tfoo(); // 出错：TypeError\n\t\tvar foo = function() {};\n\t\t\nvar定义了一个声明语句，对变量foo的解析是在运行之前，因此*foo变量在代码时已经被定义过*了，但是由于*赋值语句只在运行时执行*，因此在相应代码执行之前，foo的值为缺省undefined。\n\n##### 关于this\nthis的指向有五种情况：\n\n1. 全局范围内：指向全局对象。\n2. 函数调用：\n\t\t\n\t\tfoo();\n\t\t\n\t指向全局对象。\n3. 方法调用：\n\n\t\ttest.foo();\n\t\t\n\t指向test对象。\n4. 调用构造函数：\n\n\t\tnew Foo();\n\t\t\n\t如果函数和new关键词一起使用，称这个函数为构造函数，惯例首字母大写。\n\t\n\t此时的this指向新创建的对象。\n5. 显示的设置this：\n\n\t\tfunction foo(a, b, c) {}\n\t\t\n\t\tvar bar = {};\n\t\tfoo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\n\t\tfoo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n\t\t\n\t使用Function.prototype上的apply和call方法，this会被设置为第一个参数。可以认为这call和apply都是借用别人的方法来调用自己。\n\t\n\t这两个方法的区别在于传参方式不同，参数明确的时候可以用apply，参数不明确时可以使用apply结合arguments。\n\t\n**-小心误解**：\n\n第二个（直接调用函数时，this指向全局对象）规则被认为是js中的一个错误的设计，因为它从来就没有实际用途。\n\n当使用函数别名时，可能会令人疑惑：\n\n\t\tvar test = someObject.methodTest;\n\t\ttest();\n\t\t\n上例中将一个对象的方法赋值给test，调用test时就像在调用一个普通的函数，因此此时的this并不指向someObject对象，而是指向全局对象。\n\n\t\tfunction Foo() {}\n\t\tFoo.prototype.method = function() {};\n\t\t\n\t\tfunction Bar() {}\n\t\tBar.prototype = Foo.prototype;\n\t\t\n\t\tnew Bar().method();\n\t\t\n当 method 被调用时，this 将会指向 Bar 的实例对象。\n\n##### 闭包和引用\n闭包是js一个非常重要的特性，使得当前作用域可以访问外部作用域中的变量。函数是js中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。\n\n使用闭包可以模拟私有变量：\n\n\t\tfunction Counter(start) {\n\t\t    var count = start;\n\t\t    return {\n\t\t        increment: function() {\n\t\t            count++;\n\t\t        },\n\t\t\n\t\t        get: function() {\n\t\t            return count;\n\t\t        }\n\t\t    }\n\t\t}\n\t\t\n\t\tvar foo = Counter(4);\n\t\tfoo.increment();\n\t\tfoo.get(); // 5\n\t\t\n这里，构造函数Counter返回两个闭包：函数increment和函数get，这两个函数都维持着对外部作用域Counter的引用，因此总可以访问此作用域内定义的变量count。\n\njs中不可以对作用域进行引用或赋值，因此没有办法在外部访问count变量，唯一途径就是通过那两个闭包。\n\n\t\tvar foo = new Counter(4);\n\t\tfoo.hack = function() {\n\t\t    count = 1337;\n\t\t}; //这里赋值foo.hack无效，因为foo.hack没有定义在当前作用域内，反而会创建或赋值全局count变量\n\t\t\n**-小心循环中使用闭包**：\n\n一个常见的错误就是在循环中使用闭包：\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    setTimeout(function() {\n\t\t        console.log(i);  \n\t\t    }, 1000);\n\t\t}\n\t\t\n上面代码并不会输出0-9，而是输出十次10。\n\n当console.log被调用的时候，匿名函数保持了对外部i的调用，此时for循环已经结束，i的值被修改为了10。为了得到想要的结果，需要在每次循环中创建i的拷贝。\n\n可以使用**匿名包装器**（也就是自执行匿名函数）。\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    (function(e) {\n\t\t        setTimeout(function() {\n\t\t            console.log(e);  \n\t\t        }, 1000);\n\t\t    })(i);\n\t\t}\n\t\t\n外部的匿名函数会立即执行，并把i作为它的参数，此时函数内e变量就拥有了i的拷贝。当传递给 setTimeout的匿名函数执行时，它就拥有了对e的引用，而这个值是不会被循环改变的。\n\n或者从匿名包装器中返回一个函数，这和上面代码效果一样。\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    setTimeout((function(e) {\n\t\t        return function() {\n\t\t            console.log(e);\n\t\t        }\n\t\t    })(i), 1000)\n\t\t}\n\t\t\n##### arguments对象\njs中每个函数都能访问一个特别变量：arguments。这个变量维护所有传递到这个函数的参数列表。\n\narguments变量有length属性，但是它不是一个数组，实际上它是一个对象（Object）。\n\n可以使用for对其循环遍历，但是不能使用标准的数组方法，如push，pop或slice等。为了更好的使用数组方法，可以将其转换为数组。下面的代码会创建一个数组，包含所有arguments对象中的元素：\n\n\t\tArray.prototype.slice.call(arguments);\n\t\t\n这个转换比较慢。\n\n如果需要将参数从一个函数传递到另一个函数，推荐使用apply：\n\n\t\tfunction foo() {\n\t\t    bar.apply(null, arguments);\n\t\t}\n\t\tfunction bar(a, b, c) {\n\t\t    // 干活\n\t\t}\n\t\t\narguments为其内部属性以及函数形式参数创建getter和setter方法，因此改变形参的值会影响arguments的值，反之亦然。\n\n\t\tfunction foo(a, b, c) {\n\t\t    arguments[0] = 2;\n\t\t    a; // 2                                                           \n\t\t\n\t\t    b = 4;\n\t\t    arguments[1]; // 4\n\t\t\n\t\t    var d = c;\n\t\t    d = 9;\n\t\t    c; // 3\n\t\t}\n\t\tfoo(1, 2, 3);\n\t\t\narguments.calle属性指向调用函数，会影响js引擎的性能。\n\n##### 构造函数\n*通过new 关键字调用的函数都是构造函数。*\n\n在构造函数内部，this指向新创建的对象，这个新创建对象的prototype被指向到构造函数的prototype。\n\n如果被调用的函数没有显式的return表达式，则*隐式的会返回this对象*——也就是新创建的对象。\n\n\t\tfunction Foo() {\n\t\t    this.bla = 1;\n\t\t}\n\t\t\n\t\tFoo.prototype.test = function() {\n\t\t    console.log(this.bla);\n\t\t};\n\t\t\n\t\tvar test = new Foo();\n\t\t\n上面代码把Foo作为构造函数调用，并设置新创建对象的prototype为Foo.prototype。\n\n显式的return表达式将会影响返回结果，但*仅限于返回的是一个对象*。\n\t\t\n\t\tfunction Bar() {\n\t\t    return 2;\n\t\t}\n\t\tnew Bar(); // 返回新创建的对象，而不是字面值2，因此new Bar().constructor===Bar\n\t\t\n\t\tfunction Test() {\n\t\t    this.value = 2;\n\t\t\n\t\t    return {\n\t\t        foo: 1\n\t\t    };\n\t\t}\n\t\tnew Test(); // 返回创建的对象\n\t\t\n##### 作用域与命名空间\njs不支持块级作用域，只支持函数作用域。\n\n\t\tfunction test() { // 一个作用域\n\t\t    for(var i = 0; i < 10; i++) { // 不是一个作用域\n\t\t        // count\n\t\t    }\n\t\t    console.log(i); // 10\n\t\t}\n\t\t\njs没有显示的命名空间定义，这意味着所有对象都定义在一个全局共享的命名空间下。\n\n每次引用一个变量，js会向上遍历整个作用域直到找到这个变量为止。如果到达全局作用域仍未找到，则会抛出ReferenceError异常。\n\n所有未用var关键字声明的变量都是全局变量。js声明局部变量只有两种方式，一个是作为函数参数，一个是用var关键字。\n\n**-变量声明提升（Hoisting）**\n\n\t\tbar();\n\t\tvar bar = function() {};\n\t\tvar someValue = 42;\n\t\t\n\t\ttest();\n\t\tfunction test(data) {\n\t\t    if (false) {\n\t\t        goo = 1;\n\t\t\n\t\t    } else {\n\t\t        var goo = 2;\n\t\t    }\n\t\t    for(var i = 0; i < 100; i++) {\n\t\t        var e = data[i];\n\t\t    }\n\t\t}\n\t\t\n上面代码在运行之前将会被转化。JavaScript 将会把 var 表达式和 function 声明提升到当前作用域的顶部。但赋值语句不会被提升。\n\n\t\t// var 表达式被移动到这里\n\t\tvar bar, someValue; // 缺省值是 'undefined'\n\t\t\n\t\t// 函数声明也会提升\n\t\tfunction test(data) {\n\t\t    var goo, i, e; // 没有块级作用域，这些变量被移动到函数顶部\n\t\t    if (false) {  //if 表达式看起来修改了全局变量 goo，实际上在提升规则被应用后，却是在修改局部变量。\n\t\t        goo = 1;\n\t\t\n\t\t    } else {\n\t\t        goo = 2;\n\t\t    }\n\t\t    for(i = 0; i < 100; i++) {\n\t\t        e = data[i];\n\t\t    }\n\t\t}\n\t\t\n\t\tbar(); // 出错：TypeError，因为 bar 依然是 'undefined'\n\t\tsomeValue = 42; // 赋值语句不会被提升规则（hoisting）影响\n\t\tbar = function() {};\n\t\t\n\t\ttest();\n\t\t\n如果没有提升规则（hoisting）的知识，下面的代码看起来会抛出异常 ReferenceError。\n\n\t\t// 检查 SomeImportantThing 是否已经被初始化\n\t\tif (!SomeImportantThing) {\n\t\t    var SomeImportantThing = {};\n\t\t}\n\t\t\n实际上，上面的代码正常运行，因为 var 表达式会被提升到全局作用域的顶部。\n\n\t\tvar SomeImportantThing;\n\t\t\n\t\t// 其它一些代码，可能会初始化 SomeImportantThing，也可能不会\n\t\t\n\t\t// 检查是否已经被初始化\n\t\tif (!SomeImportantThing) {\n\t\t    SomeImportantThing = {};\n\t\t}\n\t\t\n下面这段代码执行结果也是由于hoisting的作用\n\n\t\tvar myvar = 'my value';  \n\t\t\n\t\t(function() {  \n\t\t    alert(myvar); // undefined  \n\t\t    var myvar = 'local value';  \n\t\t})(); \n\t\t\n**-名称解析顺序**\n\n当访问函数中的foo变量时，js会按照以下顺序查找：\n\n1. 当前作用域内是否有 var foo 的定义。\n2. 函数形式参数是否有使用 foo 名称的。\n3. 函数自身是否叫做 foo。\n4. 回溯到上一级作用域，然后从 #1 重新开始。\n\n**-命名空间**\n\n只有一个全局作用域常会导致命名冲突。在js中，可以通过*匿名包装器（也就是自执行的匿名函数）*来创建命空间。这样不仅可以防止命名冲突，而且有利于程序的模块化。\n\n\t\t(function() {\n\t\t    // 函数创建一个命名空间\n\t\t\n\t\t    window.foo = function() {\n\t\t        // 对外公开的函数，创建了闭包\n\t\t    };\n\t\t\n\t\t})(); // 立即执行此匿名函数\n\t\t\n---\n### 数组\n##### 数组遍历和属性\n\njs中的数组是对象，但是一般不推荐使用for in循环遍历数组，因为for in循环会枚举原型链上所有属性，这时需要用hasOwnProperty去过滤，因此速度会很慢。\n\n推荐使用经典的for循环去遍历数组并缓存数组的length属性，以达到最佳性能。\n\n\t\tvar list = [1, 2, 3, 4, 5, ...... 100000000];\n\t\tfor(var i = 0, l = list.length; i < l; i++) {\n\t\t    console.log(list[i]);\n\t\t}\n\t\t\nlength属性的getter方式会获得数组的长度，setter方式有可能截断数组：为length属性设置一个更小的值会截断数组，但是增大length属性不会对数组产生影响。\n\n##### Array构造函数\n\nArray构造函数的参数有点复杂，因此总是推荐使用数组的字面语法[]来构造数组，代码可读性更好。\n\n### 类型\n\n##### 相等于比较\n\njs有两种方式判断两个值是否相等：\n\n1. 等于==\n\n\tjs是弱类型语言，==操作符会为了比较两个值而进行强制类型转换。\n\t\n\t强制类型转换规则较为复杂，可能导致难以跟踪的问题。此外强制类型转换也会带来性能消耗。因此==被认为是一种不好的编程习惯。\n\t\n2. 严格等于===\n\n\t严格等于操作符不会进行强制类型转换。\n\t\n\t用于比较对象时，比较的不是值是否相等，只有对象的同一个实例才被认为是相等的。\n\t\n\t\t{} === {};                   // false\n\t\tnew String('foo') === 'foo'; // false\n\t\tnew Number(10) === 10;       // false\n\t\tvar foo = {};\n\t\tfoo === foo;                 // true\n\t\t\n因此建议总是使用严格等于操作符。如果类型需要转换，应该在比较之前进行显示转换，而不是使用语言本身复杂的强制转换规则。\n\n##### typeof操作符\n\ntypeof或许是js最大的一个设计缺陷。可以认为它只有一个功能：用以检测对象是否被定义或赋值。并不能检测对象类型。\n\n\t\ttypeof foo !== 'undefined'\n\t\t\n上面代码会检测对象foo是否定义过，如果没有定义会抛出ReferenceError异常。\n\n强烈建议用Object.prototype.toString检测对象的类型。这是js标准文档给出的唯一一种获取[[Class]]值的方法。\n\n\t\tObject.prototype.toString.call([])    // \"[object Array]\"\n\t\tObject.prototype.toString.call({})    // \"[object Object]\"\n\t\tObject.prototype.toString.call(2)    // \"[object Number]\"\n\t\t\nObject.prototype.toString返回一种标准格式字符串，所以上例可以通过slice截取指定位置的字符串\n\n\t\tfunction is(type, obj) {\n\t\t    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t\t    return obj !== undefined && obj !== null && clas === type;\n\t\t}\n\t\t\n\t\tis('String', 'test'); // true\n\t\tis('String', new String('test')); // true\n\t\t\n##### instanceof操作符\n\ninstanceof操作符用来比较两个操作数的构造函数，只有在比较自定义对象的时候才有意义，如果用于比较内置对象，则像typeof操作符一样意义不大。\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\t\t\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js古怪用法.md","raw":"---\ntitle: js古怪用法\ndate: 2016-07-19 20:34:39\ntags: javascript\n---\n\n学习js已有一段时间，再读[JavaScript 秘密花园](http://www.jb51.net/onlineread/JavaScript-Garden-CN/)。\n\n---\n\n### 对象\n##### 对象使用和属性\n删除属性：唯一方法是用delete操作符；设置属性为null或者undefined并不能真正的删除属性，而只是移除了属性和值的关联。\n##### 原型\njs不包含传统的类继承模型，而是使用prototype原型继承模型。\n  \t\t  \t\t\n  \t\tfunction Foo() {\n\t\t    this.value = 42;\n\t\t}\n\t\tFoo.prototype = {\n\t\t    method: function() {}\n\t\t};\n\t\t\n\t\tfunction Bar() {}\n\t\t\n\t\t// 设置Bar的prototype属性为Foo的实例对象\n\t\tBar.prototype = new Foo();\n\t\tBar.prototype.foo = 'Hello World';\n\t\t\n\t\t// 修正Bar.prototype.constructor为Bar本身\n\t\tBar.prototype.constructor = Bar;\n\t\t\n\t\tvar test = new Bar() // 创建Bar的一个新实例\n\t\t\n\t\t// 原型链\n\t\ttest [Bar的实例]\n\t\t    Bar.prototype [Foo的实例] \n\t\t        { foo: 'Hello World' }\n\t\t        Foo.prototype\n\t\t            {method: ...};\n\t\t            Object.prototype\n\t\t                {toString: ... /* etc. */};\n\t\t                \n上面的例子中，test 对象从 Bar.prototype 和 Foo.prototype 继承下来；因此， 它能访问 Foo 的原型方法 method。同时，它也能够访问那个定义在原型上的 Foo 实例属性 value。 需要注意的是 new Bar() 不会创造出一个新的 Foo 实例，而是 重复使用它原型上的那个实例；因此，所有的 Bar 实例都会共享相同的 value 属性。\n\n属性查找：在查找一个对象的属性时，JS会向上遍历原型链，直到找到为止。如果到达原型链的顶端也就是Object.prototype仍然没有找到指定的属性，就返回undefined。\n\n性能：要警惕原型链过长带来的性能问题：如果一个属性在原型链顶端，则对于查找时间会带来不利影响，特别的，当试图获取一个 不存在的属性时会遍历整个原型链。此外，当使用for...in来循环遍历对象的属性时，原型链上的所有属性都将被访问。\n\n##### hasOwnProperty函数\n用来判断一个属性是自定义属性而不是原型链上的属性。hasOwnProperty是js中*唯一*处理属性但是不查找原型链的函数。\n\n\t\t// 修改Object.prototype\n\t\tObject.prototype.bar = 1; \n\t\tvar foo = {goo: undefined};\n\t\t\n\t\tfoo.bar; // 1\n\t\t'bar' in foo; // true\n\t\t\n\t\tfoo.hasOwnProperty('bar'); // false\n\t\tfoo.hasOwnProperty('goo'); // true\n\t\t\n使用for...in loop遍历对象属性时推荐使用hasOwnProperty方法来避免原型对象扩展带来的干扰。\n\n##### for in循环\n同in操作符一样，for in循环同样在查找对象属性时遍历整个原型链。\n\n\t\t// 修改 Object.prototype\n\t\tObject.prototype.bar = 1;\n\t\t\n\t\tvar foo = {moo: 2};\n\t\tfor(var i in foo) {\n\t\t    console.log(i); // 输出两个属性：bar 和 moo\n\t\t}\n不可能改变for in自身的行为，但是可以用hasOwnProperty来过滤出那些不希望出现在循环体中的属性。\n\n\t\t// foo 变量是上例中的\n\t\tfor(var i in foo) {\n\t\t    if (foo.hasOwnProperty(i)) {\n\t\t        console.log(i);\n\t\t    }\n\t\t}\n\t\t\n这是唯一正确的写法。比如广泛使用的库Prototype就扩展了原生的js对象（不推荐该种破坏封装的做法）。因此，当使用这种类库时，如果不使用hasOwnProperty过滤的for in就难免会出现问题。\n\n因此推荐总是使用hasOwnProperty，不要对代码的运行环境做任何假设，不要假设原生对象是否被扩展了。\n\n### 函数\n##### 函数声明与表达式\n函数也是一个对象，因此可以作为参数传递或者作为返回值，一个常见的做法是把匿名函数作为回调函数传递到异步函数中。\n\n有两种定义函数的方式：函数声明和函数表达式。主要区别是函数声明创建的方法会在执行前被解析，因此它存在于当前上下文的任何一个地方，即使在函数定义体的上面调用也是完全正确的。\n\n\t\t//函数声明\n\t\tfoo(); // 正常运行，因为foo在代码运行前已经被创建\n\t\tfunction foo() {}\n上面这段代码没有问题，因为使用了函数声明。下面这段代码会出错：\n\n\t\t//函数赋值表达式\n\t\tfoo; // 'undefined'\n\t\tfoo(); // 出错：TypeError\n\t\tvar foo = function() {};\n\t\t\nvar定义了一个声明语句，对变量foo的解析是在运行之前，因此*foo变量在代码时已经被定义过*了，但是由于*赋值语句只在运行时执行*，因此在相应代码执行之前，foo的值为缺省undefined。\n\n##### 关于this\nthis的指向有五种情况：\n\n1. 全局范围内：指向全局对象。\n2. 函数调用：\n\t\t\n\t\tfoo();\n\t\t\n\t指向全局对象。\n3. 方法调用：\n\n\t\ttest.foo();\n\t\t\n\t指向test对象。\n4. 调用构造函数：\n\n\t\tnew Foo();\n\t\t\n\t如果函数和new关键词一起使用，称这个函数为构造函数，惯例首字母大写。\n\t\n\t此时的this指向新创建的对象。\n5. 显示的设置this：\n\n\t\tfunction foo(a, b, c) {}\n\t\t\n\t\tvar bar = {};\n\t\tfoo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\n\t\tfoo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n\t\t\n\t使用Function.prototype上的apply和call方法，this会被设置为第一个参数。可以认为这call和apply都是借用别人的方法来调用自己。\n\t\n\t这两个方法的区别在于传参方式不同，参数明确的时候可以用apply，参数不明确时可以使用apply结合arguments。\n\t\n**-小心误解**：\n\n第二个（直接调用函数时，this指向全局对象）规则被认为是js中的一个错误的设计，因为它从来就没有实际用途。\n\n当使用函数别名时，可能会令人疑惑：\n\n\t\tvar test = someObject.methodTest;\n\t\ttest();\n\t\t\n上例中将一个对象的方法赋值给test，调用test时就像在调用一个普通的函数，因此此时的this并不指向someObject对象，而是指向全局对象。\n\n\t\tfunction Foo() {}\n\t\tFoo.prototype.method = function() {};\n\t\t\n\t\tfunction Bar() {}\n\t\tBar.prototype = Foo.prototype;\n\t\t\n\t\tnew Bar().method();\n\t\t\n当 method 被调用时，this 将会指向 Bar 的实例对象。\n\n##### 闭包和引用\n闭包是js一个非常重要的特性，使得当前作用域可以访问外部作用域中的变量。函数是js中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。\n\n使用闭包可以模拟私有变量：\n\n\t\tfunction Counter(start) {\n\t\t    var count = start;\n\t\t    return {\n\t\t        increment: function() {\n\t\t            count++;\n\t\t        },\n\t\t\n\t\t        get: function() {\n\t\t            return count;\n\t\t        }\n\t\t    }\n\t\t}\n\t\t\n\t\tvar foo = Counter(4);\n\t\tfoo.increment();\n\t\tfoo.get(); // 5\n\t\t\n这里，构造函数Counter返回两个闭包：函数increment和函数get，这两个函数都维持着对外部作用域Counter的引用，因此总可以访问此作用域内定义的变量count。\n\njs中不可以对作用域进行引用或赋值，因此没有办法在外部访问count变量，唯一途径就是通过那两个闭包。\n\n\t\tvar foo = new Counter(4);\n\t\tfoo.hack = function() {\n\t\t    count = 1337;\n\t\t}; //这里赋值foo.hack无效，因为foo.hack没有定义在当前作用域内，反而会创建或赋值全局count变量\n\t\t\n**-小心循环中使用闭包**：\n\n一个常见的错误就是在循环中使用闭包：\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    setTimeout(function() {\n\t\t        console.log(i);  \n\t\t    }, 1000);\n\t\t}\n\t\t\n上面代码并不会输出0-9，而是输出十次10。\n\n当console.log被调用的时候，匿名函数保持了对外部i的调用，此时for循环已经结束，i的值被修改为了10。为了得到想要的结果，需要在每次循环中创建i的拷贝。\n\n可以使用**匿名包装器**（也就是自执行匿名函数）。\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    (function(e) {\n\t\t        setTimeout(function() {\n\t\t            console.log(e);  \n\t\t        }, 1000);\n\t\t    })(i);\n\t\t}\n\t\t\n外部的匿名函数会立即执行，并把i作为它的参数，此时函数内e变量就拥有了i的拷贝。当传递给 setTimeout的匿名函数执行时，它就拥有了对e的引用，而这个值是不会被循环改变的。\n\n或者从匿名包装器中返回一个函数，这和上面代码效果一样。\n\n\t\tfor(var i = 0; i < 10; i++) {\n\t\t    setTimeout((function(e) {\n\t\t        return function() {\n\t\t            console.log(e);\n\t\t        }\n\t\t    })(i), 1000)\n\t\t}\n\t\t\n##### arguments对象\njs中每个函数都能访问一个特别变量：arguments。这个变量维护所有传递到这个函数的参数列表。\n\narguments变量有length属性，但是它不是一个数组，实际上它是一个对象（Object）。\n\n可以使用for对其循环遍历，但是不能使用标准的数组方法，如push，pop或slice等。为了更好的使用数组方法，可以将其转换为数组。下面的代码会创建一个数组，包含所有arguments对象中的元素：\n\n\t\tArray.prototype.slice.call(arguments);\n\t\t\n这个转换比较慢。\n\n如果需要将参数从一个函数传递到另一个函数，推荐使用apply：\n\n\t\tfunction foo() {\n\t\t    bar.apply(null, arguments);\n\t\t}\n\t\tfunction bar(a, b, c) {\n\t\t    // 干活\n\t\t}\n\t\t\narguments为其内部属性以及函数形式参数创建getter和setter方法，因此改变形参的值会影响arguments的值，反之亦然。\n\n\t\tfunction foo(a, b, c) {\n\t\t    arguments[0] = 2;\n\t\t    a; // 2                                                           \n\t\t\n\t\t    b = 4;\n\t\t    arguments[1]; // 4\n\t\t\n\t\t    var d = c;\n\t\t    d = 9;\n\t\t    c; // 3\n\t\t}\n\t\tfoo(1, 2, 3);\n\t\t\narguments.calle属性指向调用函数，会影响js引擎的性能。\n\n##### 构造函数\n*通过new 关键字调用的函数都是构造函数。*\n\n在构造函数内部，this指向新创建的对象，这个新创建对象的prototype被指向到构造函数的prototype。\n\n如果被调用的函数没有显式的return表达式，则*隐式的会返回this对象*——也就是新创建的对象。\n\n\t\tfunction Foo() {\n\t\t    this.bla = 1;\n\t\t}\n\t\t\n\t\tFoo.prototype.test = function() {\n\t\t    console.log(this.bla);\n\t\t};\n\t\t\n\t\tvar test = new Foo();\n\t\t\n上面代码把Foo作为构造函数调用，并设置新创建对象的prototype为Foo.prototype。\n\n显式的return表达式将会影响返回结果，但*仅限于返回的是一个对象*。\n\t\t\n\t\tfunction Bar() {\n\t\t    return 2;\n\t\t}\n\t\tnew Bar(); // 返回新创建的对象，而不是字面值2，因此new Bar().constructor===Bar\n\t\t\n\t\tfunction Test() {\n\t\t    this.value = 2;\n\t\t\n\t\t    return {\n\t\t        foo: 1\n\t\t    };\n\t\t}\n\t\tnew Test(); // 返回创建的对象\n\t\t\n##### 作用域与命名空间\njs不支持块级作用域，只支持函数作用域。\n\n\t\tfunction test() { // 一个作用域\n\t\t    for(var i = 0; i < 10; i++) { // 不是一个作用域\n\t\t        // count\n\t\t    }\n\t\t    console.log(i); // 10\n\t\t}\n\t\t\njs没有显示的命名空间定义，这意味着所有对象都定义在一个全局共享的命名空间下。\n\n每次引用一个变量，js会向上遍历整个作用域直到找到这个变量为止。如果到达全局作用域仍未找到，则会抛出ReferenceError异常。\n\n所有未用var关键字声明的变量都是全局变量。js声明局部变量只有两种方式，一个是作为函数参数，一个是用var关键字。\n\n**-变量声明提升（Hoisting）**\n\n\t\tbar();\n\t\tvar bar = function() {};\n\t\tvar someValue = 42;\n\t\t\n\t\ttest();\n\t\tfunction test(data) {\n\t\t    if (false) {\n\t\t        goo = 1;\n\t\t\n\t\t    } else {\n\t\t        var goo = 2;\n\t\t    }\n\t\t    for(var i = 0; i < 100; i++) {\n\t\t        var e = data[i];\n\t\t    }\n\t\t}\n\t\t\n上面代码在运行之前将会被转化。JavaScript 将会把 var 表达式和 function 声明提升到当前作用域的顶部。但赋值语句不会被提升。\n\n\t\t// var 表达式被移动到这里\n\t\tvar bar, someValue; // 缺省值是 'undefined'\n\t\t\n\t\t// 函数声明也会提升\n\t\tfunction test(data) {\n\t\t    var goo, i, e; // 没有块级作用域，这些变量被移动到函数顶部\n\t\t    if (false) {  //if 表达式看起来修改了全局变量 goo，实际上在提升规则被应用后，却是在修改局部变量。\n\t\t        goo = 1;\n\t\t\n\t\t    } else {\n\t\t        goo = 2;\n\t\t    }\n\t\t    for(i = 0; i < 100; i++) {\n\t\t        e = data[i];\n\t\t    }\n\t\t}\n\t\t\n\t\tbar(); // 出错：TypeError，因为 bar 依然是 'undefined'\n\t\tsomeValue = 42; // 赋值语句不会被提升规则（hoisting）影响\n\t\tbar = function() {};\n\t\t\n\t\ttest();\n\t\t\n如果没有提升规则（hoisting）的知识，下面的代码看起来会抛出异常 ReferenceError。\n\n\t\t// 检查 SomeImportantThing 是否已经被初始化\n\t\tif (!SomeImportantThing) {\n\t\t    var SomeImportantThing = {};\n\t\t}\n\t\t\n实际上，上面的代码正常运行，因为 var 表达式会被提升到全局作用域的顶部。\n\n\t\tvar SomeImportantThing;\n\t\t\n\t\t// 其它一些代码，可能会初始化 SomeImportantThing，也可能不会\n\t\t\n\t\t// 检查是否已经被初始化\n\t\tif (!SomeImportantThing) {\n\t\t    SomeImportantThing = {};\n\t\t}\n\t\t\n下面这段代码执行结果也是由于hoisting的作用\n\n\t\tvar myvar = 'my value';  \n\t\t\n\t\t(function() {  \n\t\t    alert(myvar); // undefined  \n\t\t    var myvar = 'local value';  \n\t\t})(); \n\t\t\n**-名称解析顺序**\n\n当访问函数中的foo变量时，js会按照以下顺序查找：\n\n1. 当前作用域内是否有 var foo 的定义。\n2. 函数形式参数是否有使用 foo 名称的。\n3. 函数自身是否叫做 foo。\n4. 回溯到上一级作用域，然后从 #1 重新开始。\n\n**-命名空间**\n\n只有一个全局作用域常会导致命名冲突。在js中，可以通过*匿名包装器（也就是自执行的匿名函数）*来创建命空间。这样不仅可以防止命名冲突，而且有利于程序的模块化。\n\n\t\t(function() {\n\t\t    // 函数创建一个命名空间\n\t\t\n\t\t    window.foo = function() {\n\t\t        // 对外公开的函数，创建了闭包\n\t\t    };\n\t\t\n\t\t})(); // 立即执行此匿名函数\n\t\t\n---\n### 数组\n##### 数组遍历和属性\n\njs中的数组是对象，但是一般不推荐使用for in循环遍历数组，因为for in循环会枚举原型链上所有属性，这时需要用hasOwnProperty去过滤，因此速度会很慢。\n\n推荐使用经典的for循环去遍历数组并缓存数组的length属性，以达到最佳性能。\n\n\t\tvar list = [1, 2, 3, 4, 5, ...... 100000000];\n\t\tfor(var i = 0, l = list.length; i < l; i++) {\n\t\t    console.log(list[i]);\n\t\t}\n\t\t\nlength属性的getter方式会获得数组的长度，setter方式有可能截断数组：为length属性设置一个更小的值会截断数组，但是增大length属性不会对数组产生影响。\n\n##### Array构造函数\n\nArray构造函数的参数有点复杂，因此总是推荐使用数组的字面语法[]来构造数组，代码可读性更好。\n\n### 类型\n\n##### 相等于比较\n\njs有两种方式判断两个值是否相等：\n\n1. 等于==\n\n\tjs是弱类型语言，==操作符会为了比较两个值而进行强制类型转换。\n\t\n\t强制类型转换规则较为复杂，可能导致难以跟踪的问题。此外强制类型转换也会带来性能消耗。因此==被认为是一种不好的编程习惯。\n\t\n2. 严格等于===\n\n\t严格等于操作符不会进行强制类型转换。\n\t\n\t用于比较对象时，比较的不是值是否相等，只有对象的同一个实例才被认为是相等的。\n\t\n\t\t{} === {};                   // false\n\t\tnew String('foo') === 'foo'; // false\n\t\tnew Number(10) === 10;       // false\n\t\tvar foo = {};\n\t\tfoo === foo;                 // true\n\t\t\n因此建议总是使用严格等于操作符。如果类型需要转换，应该在比较之前进行显示转换，而不是使用语言本身复杂的强制转换规则。\n\n##### typeof操作符\n\ntypeof或许是js最大的一个设计缺陷。可以认为它只有一个功能：用以检测对象是否被定义或赋值。并不能检测对象类型。\n\n\t\ttypeof foo !== 'undefined'\n\t\t\n上面代码会检测对象foo是否定义过，如果没有定义会抛出ReferenceError异常。\n\n强烈建议用Object.prototype.toString检测对象的类型。这是js标准文档给出的唯一一种获取[[Class]]值的方法。\n\n\t\tObject.prototype.toString.call([])    // \"[object Array]\"\n\t\tObject.prototype.toString.call({})    // \"[object Object]\"\n\t\tObject.prototype.toString.call(2)    // \"[object Number]\"\n\t\t\nObject.prototype.toString返回一种标准格式字符串，所以上例可以通过slice截取指定位置的字符串\n\n\t\tfunction is(type, obj) {\n\t\t    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t\t    return obj !== undefined && obj !== null && clas === type;\n\t\t}\n\t\t\n\t\tis('String', 'test'); // true\n\t\tis('String', new String('test')); // true\n\t\t\n##### instanceof操作符\n\ninstanceof操作符用来比较两个操作数的构造函数，只有在比较自定义对象的时候才有意义，如果用于比较内置对象，则像typeof操作符一样意义不大。\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\t\t\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js古怪用法","published":1,"updated":"2016-08-19T09:46:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis39qua60001vizgn60ix4nx","content":"<p>学习js已有一段时间，再读<a href=\"http://www.jb51.net/onlineread/JavaScript-Garden-CN/\" target=\"_blank\" rel=\"external\">JavaScript 秘密花园</a>。</p>\n<hr>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h5 id=\"对象使用和属性\"><a href=\"#对象使用和属性\" class=\"headerlink\" title=\"对象使用和属性\"></a>对象使用和属性</h5><p>删除属性：唯一方法是用delete操作符；设置属性为null或者undefined并不能真正的删除属性，而只是移除了属性和值的关联。</p>\n<h5 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h5><p>js不包含传统的类继承模型，而是使用prototype原型继承模型。</p>\n<pre><code>  function Foo() {\n    this.value = 42;\n}\nFoo.prototype = {\n    method: function() {}\n};\n\nfunction Bar() {}\n\n// 设置Bar的prototype属性为Foo的实例对象\nBar.prototype = new Foo();\nBar.prototype.foo = &apos;Hello World&apos;;\n\n// 修正Bar.prototype.constructor为Bar本身\nBar.prototype.constructor = Bar;\n\nvar test = new Bar() // 创建Bar的一个新实例\n\n// 原型链\ntest [Bar的实例]\n    Bar.prototype [Foo的实例] \n        { foo: &apos;Hello World&apos; }\n        Foo.prototype\n            {method: ...};\n            Object.prototype\n                {toString: ... /* etc. */};\n</code></pre><p>上面的例子中，test 对象从 Bar.prototype 和 Foo.prototype 继承下来；因此， 它能访问 Foo 的原型方法 method。同时，它也能够访问那个定义在原型上的 Foo 实例属性 value。 需要注意的是 new Bar() 不会创造出一个新的 Foo 实例，而是 重复使用它原型上的那个实例；因此，所有的 Bar 实例都会共享相同的 value 属性。</p>\n<p>属性查找：在查找一个对象的属性时，JS会向上遍历原型链，直到找到为止。如果到达原型链的顶端也就是Object.prototype仍然没有找到指定的属性，就返回undefined。</p>\n<p>性能：要警惕原型链过长带来的性能问题：如果一个属性在原型链顶端，则对于查找时间会带来不利影响，特别的，当试图获取一个 不存在的属性时会遍历整个原型链。此外，当使用for…in来循环遍历对象的属性时，原型链上的所有属性都将被访问。</p>\n<h5 id=\"hasOwnProperty函数\"><a href=\"#hasOwnProperty函数\" class=\"headerlink\" title=\"hasOwnProperty函数\"></a>hasOwnProperty函数</h5><p>用来判断一个属性是自定义属性而不是原型链上的属性。hasOwnProperty是js中<em>唯一</em>处理属性但是不查找原型链的函数。</p>\n<pre><code>// 修改Object.prototype\nObject.prototype.bar = 1; \nvar foo = {goo: undefined};\n\nfoo.bar; // 1\n&apos;bar&apos; in foo; // true\n\nfoo.hasOwnProperty(&apos;bar&apos;); // false\nfoo.hasOwnProperty(&apos;goo&apos;); // true\n</code></pre><p>使用for…in loop遍历对象属性时推荐使用hasOwnProperty方法来避免原型对象扩展带来的干扰。</p>\n<h5 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for in循环\"></a>for in循环</h5><p>同in操作符一样，for in循环同样在查找对象属性时遍历整个原型链。</p>\n<pre><code>// 修改 Object.prototype\nObject.prototype.bar = 1;\n\nvar foo = {moo: 2};\nfor(var i in foo) {\n    console.log(i); // 输出两个属性：bar 和 moo\n}\n</code></pre><p>不可能改变for in自身的行为，但是可以用hasOwnProperty来过滤出那些不希望出现在循环体中的属性。</p>\n<pre><code>// foo 变量是上例中的\nfor(var i in foo) {\n    if (foo.hasOwnProperty(i)) {\n        console.log(i);\n    }\n}\n</code></pre><p>这是唯一正确的写法。比如广泛使用的库Prototype就扩展了原生的js对象（不推荐该种破坏封装的做法）。因此，当使用这种类库时，如果不使用hasOwnProperty过滤的for in就难免会出现问题。</p>\n<p>因此推荐总是使用hasOwnProperty，不要对代码的运行环境做任何假设，不要假设原生对象是否被扩展了。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h5 id=\"函数声明与表达式\"><a href=\"#函数声明与表达式\" class=\"headerlink\" title=\"函数声明与表达式\"></a>函数声明与表达式</h5><p>函数也是一个对象，因此可以作为参数传递或者作为返回值，一个常见的做法是把匿名函数作为回调函数传递到异步函数中。</p>\n<p>有两种定义函数的方式：函数声明和函数表达式。主要区别是函数声明创建的方法会在执行前被解析，因此它存在于当前上下文的任何一个地方，即使在函数定义体的上面调用也是完全正确的。</p>\n<pre><code>//函数声明\nfoo(); // 正常运行，因为foo在代码运行前已经被创建\nfunction foo() {}\n</code></pre><p>上面这段代码没有问题，因为使用了函数声明。下面这段代码会出错：</p>\n<pre><code>//函数赋值表达式\nfoo; // &apos;undefined&apos;\nfoo(); // 出错：TypeError\nvar foo = function() {};\n</code></pre><p>var定义了一个声明语句，对变量foo的解析是在运行之前，因此<em>foo变量在代码时已经被定义过</em>了，但是由于<em>赋值语句只在运行时执行</em>，因此在相应代码执行之前，foo的值为缺省undefined。</p>\n<h5 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h5><p>this的指向有五种情况：</p>\n<ol>\n<li>全局范围内：指向全局对象。</li>\n<li><p>函数调用：</p>\n<pre><code>foo();\n</code></pre><p> 指向全局对象。</p>\n</li>\n<li><p>方法调用：</p>\n<pre><code>test.foo();\n</code></pre><p> 指向test对象。</p>\n</li>\n<li><p>调用构造函数：</p>\n<pre><code>new Foo();\n</code></pre><p> 如果函数和new关键词一起使用，称这个函数为构造函数，惯例首字母大写。</p>\n<p> 此时的this指向新创建的对象。</p>\n</li>\n<li><p>显示的设置this：</p>\n<pre><code>function foo(a, b, c) {}\n\nvar bar = {};\nfoo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\nfoo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n</code></pre><p> 使用Function.prototype上的apply和call方法，this会被设置为第一个参数。可以认为这call和apply都是借用别人的方法来调用自己。</p>\n<p> 这两个方法的区别在于传参方式不同，参数明确的时候可以用apply，参数不明确时可以使用apply结合arguments。</p>\n</li>\n</ol>\n<p><strong>-小心误解</strong>：</p>\n<p>第二个（直接调用函数时，this指向全局对象）规则被认为是js中的一个错误的设计，因为它从来就没有实际用途。</p>\n<p>当使用函数别名时，可能会令人疑惑：</p>\n<pre><code>var test = someObject.methodTest;\ntest();\n</code></pre><p>上例中将一个对象的方法赋值给test，调用test时就像在调用一个普通的函数，因此此时的this并不指向someObject对象，而是指向全局对象。</p>\n<pre><code>function Foo() {}\nFoo.prototype.method = function() {};\n\nfunction Bar() {}\nBar.prototype = Foo.prototype;\n\nnew Bar().method();\n</code></pre><p>当 method 被调用时，this 将会指向 Bar 的实例对象。</p>\n<h5 id=\"闭包和引用\"><a href=\"#闭包和引用\" class=\"headerlink\" title=\"闭包和引用\"></a>闭包和引用</h5><p>闭包是js一个非常重要的特性，使得当前作用域可以访问外部作用域中的变量。函数是js中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。</p>\n<p>使用闭包可以模拟私有变量：</p>\n<pre><code>function Counter(start) {\n    var count = start;\n    return {\n        increment: function() {\n            count++;\n        },\n\n        get: function() {\n            return count;\n        }\n    }\n}\n\nvar foo = Counter(4);\nfoo.increment();\nfoo.get(); // 5\n</code></pre><p>这里，构造函数Counter返回两个闭包：函数increment和函数get，这两个函数都维持着对外部作用域Counter的引用，因此总可以访问此作用域内定义的变量count。</p>\n<p>js中不可以对作用域进行引用或赋值，因此没有办法在外部访问count变量，唯一途径就是通过那两个闭包。</p>\n<pre><code>var foo = new Counter(4);\nfoo.hack = function() {\n    count = 1337;\n}; //这里赋值foo.hack无效，因为foo.hack没有定义在当前作用域内，反而会创建或赋值全局count变量\n</code></pre><p><strong>-小心循环中使用闭包</strong>：</p>\n<p>一个常见的错误就是在循环中使用闭包：</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    setTimeout(function() {\n        console.log(i);  \n    }, 1000);\n}\n</code></pre><p>上面代码并不会输出0-9，而是输出十次10。</p>\n<p>当console.log被调用的时候，匿名函数保持了对外部i的调用，此时for循环已经结束，i的值被修改为了10。为了得到想要的结果，需要在每次循环中创建i的拷贝。</p>\n<p>可以使用<strong>匿名包装器</strong>（也就是自执行匿名函数）。</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    (function(e) {\n        setTimeout(function() {\n            console.log(e);  \n        }, 1000);\n    })(i);\n}\n</code></pre><p>外部的匿名函数会立即执行，并把i作为它的参数，此时函数内e变量就拥有了i的拷贝。当传递给 setTimeout的匿名函数执行时，它就拥有了对e的引用，而这个值是不会被循环改变的。</p>\n<p>或者从匿名包装器中返回一个函数，这和上面代码效果一样。</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    setTimeout((function(e) {\n        return function() {\n            console.log(e);\n        }\n    })(i), 1000)\n}\n</code></pre><h5 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h5><p>js中每个函数都能访问一个特别变量：arguments。这个变量维护所有传递到这个函数的参数列表。</p>\n<p>arguments变量有length属性，但是它不是一个数组，实际上它是一个对象（Object）。</p>\n<p>可以使用for对其循环遍历，但是不能使用标准的数组方法，如push，pop或slice等。为了更好的使用数组方法，可以将其转换为数组。下面的代码会创建一个数组，包含所有arguments对象中的元素：</p>\n<pre><code>Array.prototype.slice.call(arguments);\n</code></pre><p>这个转换比较慢。</p>\n<p>如果需要将参数从一个函数传递到另一个函数，推荐使用apply：</p>\n<pre><code>function foo() {\n    bar.apply(null, arguments);\n}\nfunction bar(a, b, c) {\n    // 干活\n}\n</code></pre><p>arguments为其内部属性以及函数形式参数创建getter和setter方法，因此改变形参的值会影响arguments的值，反之亦然。</p>\n<pre><code>function foo(a, b, c) {\n    arguments[0] = 2;\n    a; // 2                                                           \n\n    b = 4;\n    arguments[1]; // 4\n\n    var d = c;\n    d = 9;\n    c; // 3\n}\nfoo(1, 2, 3);\n</code></pre><p>arguments.calle属性指向调用函数，会影响js引擎的性能。</p>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p><em>通过new 关键字调用的函数都是构造函数。</em></p>\n<p>在构造函数内部，this指向新创建的对象，这个新创建对象的prototype被指向到构造函数的prototype。</p>\n<p>如果被调用的函数没有显式的return表达式，则<em>隐式的会返回this对象</em>——也就是新创建的对象。</p>\n<pre><code>function Foo() {\n    this.bla = 1;\n}\n\nFoo.prototype.test = function() {\n    console.log(this.bla);\n};\n\nvar test = new Foo();\n</code></pre><p>上面代码把Foo作为构造函数调用，并设置新创建对象的prototype为Foo.prototype。</p>\n<p>显式的return表达式将会影响返回结果，但<em>仅限于返回的是一个对象</em>。</p>\n<pre><code>function Bar() {\n    return 2;\n}\nnew Bar(); // 返回新创建的对象，而不是字面值2，因此new Bar().constructor===Bar\n\nfunction Test() {\n    this.value = 2;\n\n    return {\n        foo: 1\n    };\n}\nnew Test(); // 返回创建的对象\n</code></pre><h5 id=\"作用域与命名空间\"><a href=\"#作用域与命名空间\" class=\"headerlink\" title=\"作用域与命名空间\"></a>作用域与命名空间</h5><p>js不支持块级作用域，只支持函数作用域。</p>\n<pre><code>function test() { // 一个作用域\n    for(var i = 0; i &lt; 10; i++) { // 不是一个作用域\n        // count\n    }\n    console.log(i); // 10\n}\n</code></pre><p>js没有显示的命名空间定义，这意味着所有对象都定义在一个全局共享的命名空间下。</p>\n<p>每次引用一个变量，js会向上遍历整个作用域直到找到这个变量为止。如果到达全局作用域仍未找到，则会抛出ReferenceError异常。</p>\n<p>所有未用var关键字声明的变量都是全局变量。js声明局部变量只有两种方式，一个是作为函数参数，一个是用var关键字。</p>\n<p><strong>-变量声明提升（Hoisting）</strong></p>\n<pre><code>bar();\nvar bar = function() {};\nvar someValue = 42;\n\ntest();\nfunction test(data) {\n    if (false) {\n        goo = 1;\n\n    } else {\n        var goo = 2;\n    }\n    for(var i = 0; i &lt; 100; i++) {\n        var e = data[i];\n    }\n}\n</code></pre><p>上面代码在运行之前将会被转化。JavaScript 将会把 var 表达式和 function 声明提升到当前作用域的顶部。但赋值语句不会被提升。</p>\n<pre><code>// var 表达式被移动到这里\nvar bar, someValue; // 缺省值是 &apos;undefined&apos;\n\n// 函数声明也会提升\nfunction test(data) {\n    var goo, i, e; // 没有块级作用域，这些变量被移动到函数顶部\n    if (false) {  //if 表达式看起来修改了全局变量 goo，实际上在提升规则被应用后，却是在修改局部变量。\n        goo = 1;\n\n    } else {\n        goo = 2;\n    }\n    for(i = 0; i &lt; 100; i++) {\n        e = data[i];\n    }\n}\n\nbar(); // 出错：TypeError，因为 bar 依然是 &apos;undefined&apos;\nsomeValue = 42; // 赋值语句不会被提升规则（hoisting）影响\nbar = function() {};\n\ntest();\n</code></pre><p>如果没有提升规则（hoisting）的知识，下面的代码看起来会抛出异常 ReferenceError。</p>\n<pre><code>// 检查 SomeImportantThing 是否已经被初始化\nif (!SomeImportantThing) {\n    var SomeImportantThing = {};\n}\n</code></pre><p>实际上，上面的代码正常运行，因为 var 表达式会被提升到全局作用域的顶部。</p>\n<pre><code>var SomeImportantThing;\n\n// 其它一些代码，可能会初始化 SomeImportantThing，也可能不会\n\n// 检查是否已经被初始化\nif (!SomeImportantThing) {\n    SomeImportantThing = {};\n}\n</code></pre><p>下面这段代码执行结果也是由于hoisting的作用</p>\n<pre><code>var myvar = &apos;my value&apos;;  \n\n(function() {  \n    alert(myvar); // undefined  \n    var myvar = &apos;local value&apos;;  \n})(); \n</code></pre><p><strong>-名称解析顺序</strong></p>\n<p>当访问函数中的foo变量时，js会按照以下顺序查找：</p>\n<ol>\n<li>当前作用域内是否有 var foo 的定义。</li>\n<li>函数形式参数是否有使用 foo 名称的。</li>\n<li>函数自身是否叫做 foo。</li>\n<li>回溯到上一级作用域，然后从 #1 重新开始。</li>\n</ol>\n<p><strong>-命名空间</strong></p>\n<p>只有一个全局作用域常会导致命名冲突。在js中，可以通过<em>匿名包装器（也就是自执行的匿名函数）</em>来创建命空间。这样不仅可以防止命名冲突，而且有利于程序的模块化。</p>\n<pre><code>(function() {\n    // 函数创建一个命名空间\n\n    window.foo = function() {\n        // 对外公开的函数，创建了闭包\n    };\n\n})(); // 立即执行此匿名函数\n</code></pre><hr>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h5 id=\"数组遍历和属性\"><a href=\"#数组遍历和属性\" class=\"headerlink\" title=\"数组遍历和属性\"></a>数组遍历和属性</h5><p>js中的数组是对象，但是一般不推荐使用for in循环遍历数组，因为for in循环会枚举原型链上所有属性，这时需要用hasOwnProperty去过滤，因此速度会很慢。</p>\n<p>推荐使用经典的for循环去遍历数组并缓存数组的length属性，以达到最佳性能。</p>\n<pre><code>var list = [1, 2, 3, 4, 5, ...... 100000000];\nfor(var i = 0, l = list.length; i &lt; l; i++) {\n    console.log(list[i]);\n}\n</code></pre><p>length属性的getter方式会获得数组的长度，setter方式有可能截断数组：为length属性设置一个更小的值会截断数组，但是增大length属性不会对数组产生影响。</p>\n<h5 id=\"Array构造函数\"><a href=\"#Array构造函数\" class=\"headerlink\" title=\"Array构造函数\"></a>Array构造函数</h5><p>Array构造函数的参数有点复杂，因此总是推荐使用数组的字面语法[]来构造数组，代码可读性更好。</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h5 id=\"相等于比较\"><a href=\"#相等于比较\" class=\"headerlink\" title=\"相等于比较\"></a>相等于比较</h5><p>js有两种方式判断两个值是否相等：</p>\n<ol>\n<li><p>等于==</p>\n<p> js是弱类型语言，==操作符会为了比较两个值而进行强制类型转换。</p>\n<p> 强制类型转换规则较为复杂，可能导致难以跟踪的问题。此外强制类型转换也会带来性能消耗。因此==被认为是一种不好的编程习惯。</p>\n</li>\n<li><p>严格等于===</p>\n<p> 严格等于操作符不会进行强制类型转换。</p>\n<p> 用于比较对象时，比较的不是值是否相等，只有对象的同一个实例才被认为是相等的。</p>\n<pre><code>{} === {};                   // false\nnew String(&apos;foo&apos;) === &apos;foo&apos;; // false\nnew Number(10) === 10;       // false\nvar foo = {};\nfoo === foo;                 // true\n</code></pre></li>\n</ol>\n<p>因此建议总是使用严格等于操作符。如果类型需要转换，应该在比较之前进行显示转换，而不是使用语言本身复杂的强制转换规则。</p>\n<h5 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h5><p>typeof或许是js最大的一个设计缺陷。可以认为它只有一个功能：用以检测对象是否被定义或赋值。并不能检测对象类型。</p>\n<pre><code>typeof foo !== &apos;undefined&apos;\n</code></pre><p>上面代码会检测对象foo是否定义过，如果没有定义会抛出ReferenceError异常。</p>\n<p>强烈建议用Object.prototype.toString检测对象的类型。这是js标准文档给出的唯一一种获取[[Class]]值的方法。</p>\n<pre><code>Object.prototype.toString.call([])    // &quot;[object Array]&quot;\nObject.prototype.toString.call({})    // &quot;[object Object]&quot;\nObject.prototype.toString.call(2)    // &quot;[object Number]&quot;\n</code></pre><p>Object.prototype.toString返回一种标准格式字符串，所以上例可以通过slice截取指定位置的字符串</p>\n<pre><code>function is(type, obj) {\n    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n    return obj !== undefined &amp;&amp; obj !== null &amp;&amp; clas === type;\n}\n\nis(&apos;String&apos;, &apos;test&apos;); // true\nis(&apos;String&apos;, new String(&apos;test&apos;)); // true\n</code></pre><h5 id=\"instanceof操作符\"><a href=\"#instanceof操作符\" class=\"headerlink\" title=\"instanceof操作符\"></a>instanceof操作符</h5><p>instanceof操作符用来比较两个操作数的构造函数，只有在比较自定义对象的时候才有意义，如果用于比较内置对象，则像typeof操作符一样意义不大。</p>\n","excerpt":"","more":"<p>学习js已有一段时间，再读<a href=\"http://www.jb51.net/onlineread/JavaScript-Garden-CN/\">JavaScript 秘密花园</a>。</p>\n<hr>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h5 id=\"对象使用和属性\"><a href=\"#对象使用和属性\" class=\"headerlink\" title=\"对象使用和属性\"></a>对象使用和属性</h5><p>删除属性：唯一方法是用delete操作符；设置属性为null或者undefined并不能真正的删除属性，而只是移除了属性和值的关联。</p>\n<h5 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h5><p>js不包含传统的类继承模型，而是使用prototype原型继承模型。</p>\n<pre><code>  function Foo() {\n    this.value = 42;\n}\nFoo.prototype = {\n    method: function() {}\n};\n\nfunction Bar() {}\n\n// 设置Bar的prototype属性为Foo的实例对象\nBar.prototype = new Foo();\nBar.prototype.foo = &apos;Hello World&apos;;\n\n// 修正Bar.prototype.constructor为Bar本身\nBar.prototype.constructor = Bar;\n\nvar test = new Bar() // 创建Bar的一个新实例\n\n// 原型链\ntest [Bar的实例]\n    Bar.prototype [Foo的实例] \n        { foo: &apos;Hello World&apos; }\n        Foo.prototype\n            {method: ...};\n            Object.prototype\n                {toString: ... /* etc. */};\n</code></pre><p>上面的例子中，test 对象从 Bar.prototype 和 Foo.prototype 继承下来；因此， 它能访问 Foo 的原型方法 method。同时，它也能够访问那个定义在原型上的 Foo 实例属性 value。 需要注意的是 new Bar() 不会创造出一个新的 Foo 实例，而是 重复使用它原型上的那个实例；因此，所有的 Bar 实例都会共享相同的 value 属性。</p>\n<p>属性查找：在查找一个对象的属性时，JS会向上遍历原型链，直到找到为止。如果到达原型链的顶端也就是Object.prototype仍然没有找到指定的属性，就返回undefined。</p>\n<p>性能：要警惕原型链过长带来的性能问题：如果一个属性在原型链顶端，则对于查找时间会带来不利影响，特别的，当试图获取一个 不存在的属性时会遍历整个原型链。此外，当使用for…in来循环遍历对象的属性时，原型链上的所有属性都将被访问。</p>\n<h5 id=\"hasOwnProperty函数\"><a href=\"#hasOwnProperty函数\" class=\"headerlink\" title=\"hasOwnProperty函数\"></a>hasOwnProperty函数</h5><p>用来判断一个属性是自定义属性而不是原型链上的属性。hasOwnProperty是js中<em>唯一</em>处理属性但是不查找原型链的函数。</p>\n<pre><code>// 修改Object.prototype\nObject.prototype.bar = 1; \nvar foo = {goo: undefined};\n\nfoo.bar; // 1\n&apos;bar&apos; in foo; // true\n\nfoo.hasOwnProperty(&apos;bar&apos;); // false\nfoo.hasOwnProperty(&apos;goo&apos;); // true\n</code></pre><p>使用for…in loop遍历对象属性时推荐使用hasOwnProperty方法来避免原型对象扩展带来的干扰。</p>\n<h5 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for in循环\"></a>for in循环</h5><p>同in操作符一样，for in循环同样在查找对象属性时遍历整个原型链。</p>\n<pre><code>// 修改 Object.prototype\nObject.prototype.bar = 1;\n\nvar foo = {moo: 2};\nfor(var i in foo) {\n    console.log(i); // 输出两个属性：bar 和 moo\n}\n</code></pre><p>不可能改变for in自身的行为，但是可以用hasOwnProperty来过滤出那些不希望出现在循环体中的属性。</p>\n<pre><code>// foo 变量是上例中的\nfor(var i in foo) {\n    if (foo.hasOwnProperty(i)) {\n        console.log(i);\n    }\n}\n</code></pre><p>这是唯一正确的写法。比如广泛使用的库Prototype就扩展了原生的js对象（不推荐该种破坏封装的做法）。因此，当使用这种类库时，如果不使用hasOwnProperty过滤的for in就难免会出现问题。</p>\n<p>因此推荐总是使用hasOwnProperty，不要对代码的运行环境做任何假设，不要假设原生对象是否被扩展了。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h5 id=\"函数声明与表达式\"><a href=\"#函数声明与表达式\" class=\"headerlink\" title=\"函数声明与表达式\"></a>函数声明与表达式</h5><p>函数也是一个对象，因此可以作为参数传递或者作为返回值，一个常见的做法是把匿名函数作为回调函数传递到异步函数中。</p>\n<p>有两种定义函数的方式：函数声明和函数表达式。主要区别是函数声明创建的方法会在执行前被解析，因此它存在于当前上下文的任何一个地方，即使在函数定义体的上面调用也是完全正确的。</p>\n<pre><code>//函数声明\nfoo(); // 正常运行，因为foo在代码运行前已经被创建\nfunction foo() {}\n</code></pre><p>上面这段代码没有问题，因为使用了函数声明。下面这段代码会出错：</p>\n<pre><code>//函数赋值表达式\nfoo; // &apos;undefined&apos;\nfoo(); // 出错：TypeError\nvar foo = function() {};\n</code></pre><p>var定义了一个声明语句，对变量foo的解析是在运行之前，因此<em>foo变量在代码时已经被定义过</em>了，但是由于<em>赋值语句只在运行时执行</em>，因此在相应代码执行之前，foo的值为缺省undefined。</p>\n<h5 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h5><p>this的指向有五种情况：</p>\n<ol>\n<li>全局范围内：指向全局对象。</li>\n<li><p>函数调用：</p>\n<pre><code>foo();\n</code></pre><p> 指向全局对象。</p>\n</li>\n<li><p>方法调用：</p>\n<pre><code>test.foo();\n</code></pre><p> 指向test对象。</p>\n</li>\n<li><p>调用构造函数：</p>\n<pre><code>new Foo();\n</code></pre><p> 如果函数和new关键词一起使用，称这个函数为构造函数，惯例首字母大写。</p>\n<p> 此时的this指向新创建的对象。</p>\n</li>\n<li><p>显示的设置this：</p>\n<pre><code>function foo(a, b, c) {}\n\nvar bar = {};\nfoo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\nfoo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n</code></pre><p> 使用Function.prototype上的apply和call方法，this会被设置为第一个参数。可以认为这call和apply都是借用别人的方法来调用自己。</p>\n<p> 这两个方法的区别在于传参方式不同，参数明确的时候可以用apply，参数不明确时可以使用apply结合arguments。</p>\n</li>\n</ol>\n<p><strong>-小心误解</strong>：</p>\n<p>第二个（直接调用函数时，this指向全局对象）规则被认为是js中的一个错误的设计，因为它从来就没有实际用途。</p>\n<p>当使用函数别名时，可能会令人疑惑：</p>\n<pre><code>var test = someObject.methodTest;\ntest();\n</code></pre><p>上例中将一个对象的方法赋值给test，调用test时就像在调用一个普通的函数，因此此时的this并不指向someObject对象，而是指向全局对象。</p>\n<pre><code>function Foo() {}\nFoo.prototype.method = function() {};\n\nfunction Bar() {}\nBar.prototype = Foo.prototype;\n\nnew Bar().method();\n</code></pre><p>当 method 被调用时，this 将会指向 Bar 的实例对象。</p>\n<h5 id=\"闭包和引用\"><a href=\"#闭包和引用\" class=\"headerlink\" title=\"闭包和引用\"></a>闭包和引用</h5><p>闭包是js一个非常重要的特性，使得当前作用域可以访问外部作用域中的变量。函数是js中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。</p>\n<p>使用闭包可以模拟私有变量：</p>\n<pre><code>function Counter(start) {\n    var count = start;\n    return {\n        increment: function() {\n            count++;\n        },\n\n        get: function() {\n            return count;\n        }\n    }\n}\n\nvar foo = Counter(4);\nfoo.increment();\nfoo.get(); // 5\n</code></pre><p>这里，构造函数Counter返回两个闭包：函数increment和函数get，这两个函数都维持着对外部作用域Counter的引用，因此总可以访问此作用域内定义的变量count。</p>\n<p>js中不可以对作用域进行引用或赋值，因此没有办法在外部访问count变量，唯一途径就是通过那两个闭包。</p>\n<pre><code>var foo = new Counter(4);\nfoo.hack = function() {\n    count = 1337;\n}; //这里赋值foo.hack无效，因为foo.hack没有定义在当前作用域内，反而会创建或赋值全局count变量\n</code></pre><p><strong>-小心循环中使用闭包</strong>：</p>\n<p>一个常见的错误就是在循环中使用闭包：</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    setTimeout(function() {\n        console.log(i);  \n    }, 1000);\n}\n</code></pre><p>上面代码并不会输出0-9，而是输出十次10。</p>\n<p>当console.log被调用的时候，匿名函数保持了对外部i的调用，此时for循环已经结束，i的值被修改为了10。为了得到想要的结果，需要在每次循环中创建i的拷贝。</p>\n<p>可以使用<strong>匿名包装器</strong>（也就是自执行匿名函数）。</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    (function(e) {\n        setTimeout(function() {\n            console.log(e);  \n        }, 1000);\n    })(i);\n}\n</code></pre><p>外部的匿名函数会立即执行，并把i作为它的参数，此时函数内e变量就拥有了i的拷贝。当传递给 setTimeout的匿名函数执行时，它就拥有了对e的引用，而这个值是不会被循环改变的。</p>\n<p>或者从匿名包装器中返回一个函数，这和上面代码效果一样。</p>\n<pre><code>for(var i = 0; i &lt; 10; i++) {\n    setTimeout((function(e) {\n        return function() {\n            console.log(e);\n        }\n    })(i), 1000)\n}\n</code></pre><h5 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h5><p>js中每个函数都能访问一个特别变量：arguments。这个变量维护所有传递到这个函数的参数列表。</p>\n<p>arguments变量有length属性，但是它不是一个数组，实际上它是一个对象（Object）。</p>\n<p>可以使用for对其循环遍历，但是不能使用标准的数组方法，如push，pop或slice等。为了更好的使用数组方法，可以将其转换为数组。下面的代码会创建一个数组，包含所有arguments对象中的元素：</p>\n<pre><code>Array.prototype.slice.call(arguments);\n</code></pre><p>这个转换比较慢。</p>\n<p>如果需要将参数从一个函数传递到另一个函数，推荐使用apply：</p>\n<pre><code>function foo() {\n    bar.apply(null, arguments);\n}\nfunction bar(a, b, c) {\n    // 干活\n}\n</code></pre><p>arguments为其内部属性以及函数形式参数创建getter和setter方法，因此改变形参的值会影响arguments的值，反之亦然。</p>\n<pre><code>function foo(a, b, c) {\n    arguments[0] = 2;\n    a; // 2                                                           \n\n    b = 4;\n    arguments[1]; // 4\n\n    var d = c;\n    d = 9;\n    c; // 3\n}\nfoo(1, 2, 3);\n</code></pre><p>arguments.calle属性指向调用函数，会影响js引擎的性能。</p>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p><em>通过new 关键字调用的函数都是构造函数。</em></p>\n<p>在构造函数内部，this指向新创建的对象，这个新创建对象的prototype被指向到构造函数的prototype。</p>\n<p>如果被调用的函数没有显式的return表达式，则<em>隐式的会返回this对象</em>——也就是新创建的对象。</p>\n<pre><code>function Foo() {\n    this.bla = 1;\n}\n\nFoo.prototype.test = function() {\n    console.log(this.bla);\n};\n\nvar test = new Foo();\n</code></pre><p>上面代码把Foo作为构造函数调用，并设置新创建对象的prototype为Foo.prototype。</p>\n<p>显式的return表达式将会影响返回结果，但<em>仅限于返回的是一个对象</em>。</p>\n<pre><code>function Bar() {\n    return 2;\n}\nnew Bar(); // 返回新创建的对象，而不是字面值2，因此new Bar().constructor===Bar\n\nfunction Test() {\n    this.value = 2;\n\n    return {\n        foo: 1\n    };\n}\nnew Test(); // 返回创建的对象\n</code></pre><h5 id=\"作用域与命名空间\"><a href=\"#作用域与命名空间\" class=\"headerlink\" title=\"作用域与命名空间\"></a>作用域与命名空间</h5><p>js不支持块级作用域，只支持函数作用域。</p>\n<pre><code>function test() { // 一个作用域\n    for(var i = 0; i &lt; 10; i++) { // 不是一个作用域\n        // count\n    }\n    console.log(i); // 10\n}\n</code></pre><p>js没有显示的命名空间定义，这意味着所有对象都定义在一个全局共享的命名空间下。</p>\n<p>每次引用一个变量，js会向上遍历整个作用域直到找到这个变量为止。如果到达全局作用域仍未找到，则会抛出ReferenceError异常。</p>\n<p>所有未用var关键字声明的变量都是全局变量。js声明局部变量只有两种方式，一个是作为函数参数，一个是用var关键字。</p>\n<p><strong>-变量声明提升（Hoisting）</strong></p>\n<pre><code>bar();\nvar bar = function() {};\nvar someValue = 42;\n\ntest();\nfunction test(data) {\n    if (false) {\n        goo = 1;\n\n    } else {\n        var goo = 2;\n    }\n    for(var i = 0; i &lt; 100; i++) {\n        var e = data[i];\n    }\n}\n</code></pre><p>上面代码在运行之前将会被转化。JavaScript 将会把 var 表达式和 function 声明提升到当前作用域的顶部。但赋值语句不会被提升。</p>\n<pre><code>// var 表达式被移动到这里\nvar bar, someValue; // 缺省值是 &apos;undefined&apos;\n\n// 函数声明也会提升\nfunction test(data) {\n    var goo, i, e; // 没有块级作用域，这些变量被移动到函数顶部\n    if (false) {  //if 表达式看起来修改了全局变量 goo，实际上在提升规则被应用后，却是在修改局部变量。\n        goo = 1;\n\n    } else {\n        goo = 2;\n    }\n    for(i = 0; i &lt; 100; i++) {\n        e = data[i];\n    }\n}\n\nbar(); // 出错：TypeError，因为 bar 依然是 &apos;undefined&apos;\nsomeValue = 42; // 赋值语句不会被提升规则（hoisting）影响\nbar = function() {};\n\ntest();\n</code></pre><p>如果没有提升规则（hoisting）的知识，下面的代码看起来会抛出异常 ReferenceError。</p>\n<pre><code>// 检查 SomeImportantThing 是否已经被初始化\nif (!SomeImportantThing) {\n    var SomeImportantThing = {};\n}\n</code></pre><p>实际上，上面的代码正常运行，因为 var 表达式会被提升到全局作用域的顶部。</p>\n<pre><code>var SomeImportantThing;\n\n// 其它一些代码，可能会初始化 SomeImportantThing，也可能不会\n\n// 检查是否已经被初始化\nif (!SomeImportantThing) {\n    SomeImportantThing = {};\n}\n</code></pre><p>下面这段代码执行结果也是由于hoisting的作用</p>\n<pre><code>var myvar = &apos;my value&apos;;  \n\n(function() {  \n    alert(myvar); // undefined  \n    var myvar = &apos;local value&apos;;  \n})(); \n</code></pre><p><strong>-名称解析顺序</strong></p>\n<p>当访问函数中的foo变量时，js会按照以下顺序查找：</p>\n<ol>\n<li>当前作用域内是否有 var foo 的定义。</li>\n<li>函数形式参数是否有使用 foo 名称的。</li>\n<li>函数自身是否叫做 foo。</li>\n<li>回溯到上一级作用域，然后从 #1 重新开始。</li>\n</ol>\n<p><strong>-命名空间</strong></p>\n<p>只有一个全局作用域常会导致命名冲突。在js中，可以通过<em>匿名包装器（也就是自执行的匿名函数）</em>来创建命空间。这样不仅可以防止命名冲突，而且有利于程序的模块化。</p>\n<pre><code>(function() {\n    // 函数创建一个命名空间\n\n    window.foo = function() {\n        // 对外公开的函数，创建了闭包\n    };\n\n})(); // 立即执行此匿名函数\n</code></pre><hr>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h5 id=\"数组遍历和属性\"><a href=\"#数组遍历和属性\" class=\"headerlink\" title=\"数组遍历和属性\"></a>数组遍历和属性</h5><p>js中的数组是对象，但是一般不推荐使用for in循环遍历数组，因为for in循环会枚举原型链上所有属性，这时需要用hasOwnProperty去过滤，因此速度会很慢。</p>\n<p>推荐使用经典的for循环去遍历数组并缓存数组的length属性，以达到最佳性能。</p>\n<pre><code>var list = [1, 2, 3, 4, 5, ...... 100000000];\nfor(var i = 0, l = list.length; i &lt; l; i++) {\n    console.log(list[i]);\n}\n</code></pre><p>length属性的getter方式会获得数组的长度，setter方式有可能截断数组：为length属性设置一个更小的值会截断数组，但是增大length属性不会对数组产生影响。</p>\n<h5 id=\"Array构造函数\"><a href=\"#Array构造函数\" class=\"headerlink\" title=\"Array构造函数\"></a>Array构造函数</h5><p>Array构造函数的参数有点复杂，因此总是推荐使用数组的字面语法[]来构造数组，代码可读性更好。</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><h5 id=\"相等于比较\"><a href=\"#相等于比较\" class=\"headerlink\" title=\"相等于比较\"></a>相等于比较</h5><p>js有两种方式判断两个值是否相等：</p>\n<ol>\n<li><p>等于==</p>\n<p> js是弱类型语言，==操作符会为了比较两个值而进行强制类型转换。</p>\n<p> 强制类型转换规则较为复杂，可能导致难以跟踪的问题。此外强制类型转换也会带来性能消耗。因此==被认为是一种不好的编程习惯。</p>\n</li>\n<li><p>严格等于===</p>\n<p> 严格等于操作符不会进行强制类型转换。</p>\n<p> 用于比较对象时，比较的不是值是否相等，只有对象的同一个实例才被认为是相等的。</p>\n<pre><code>{} === {};                   // false\nnew String(&apos;foo&apos;) === &apos;foo&apos;; // false\nnew Number(10) === 10;       // false\nvar foo = {};\nfoo === foo;                 // true\n</code></pre></li>\n</ol>\n<p>因此建议总是使用严格等于操作符。如果类型需要转换，应该在比较之前进行显示转换，而不是使用语言本身复杂的强制转换规则。</p>\n<h5 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h5><p>typeof或许是js最大的一个设计缺陷。可以认为它只有一个功能：用以检测对象是否被定义或赋值。并不能检测对象类型。</p>\n<pre><code>typeof foo !== &apos;undefined&apos;\n</code></pre><p>上面代码会检测对象foo是否定义过，如果没有定义会抛出ReferenceError异常。</p>\n<p>强烈建议用Object.prototype.toString检测对象的类型。这是js标准文档给出的唯一一种获取[[Class]]值的方法。</p>\n<pre><code>Object.prototype.toString.call([])    // &quot;[object Array]&quot;\nObject.prototype.toString.call({})    // &quot;[object Object]&quot;\nObject.prototype.toString.call(2)    // &quot;[object Number]&quot;\n</code></pre><p>Object.prototype.toString返回一种标准格式字符串，所以上例可以通过slice截取指定位置的字符串</p>\n<pre><code>function is(type, obj) {\n    var clas = Object.prototype.toString.call(obj).slice(8, -1);\n    return obj !== undefined &amp;&amp; obj !== null &amp;&amp; clas === type;\n}\n\nis(&apos;String&apos;, &apos;test&apos;); // true\nis(&apos;String&apos;, new String(&apos;test&apos;)); // true\n</code></pre><h5 id=\"instanceof操作符\"><a href=\"#instanceof操作符\" class=\"headerlink\" title=\"instanceof操作符\"></a>instanceof操作符</h5><p>instanceof操作符用来比较两个操作数的构造函数，只有在比较自定义对象的时候才有意义，如果用于比较内置对象，则像typeof操作符一样意义不大。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cis39qua60001vizgn60ix4nx","tag_id":"cis39quac0002vizgf5m9papm","_id":"cis39quaf0003vizgr877lacw"}],"Tag":[{"name":"javascript","_id":"cis39quac0002vizgf5m9papm"}]}}